generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Product {
  id                     String                 @id @default(cuid())
  name                   String
  priceInCents           Int
  filePath               String
  imagePath              String
  description            String
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  orders                 Order[]
  downloadVerifications  DownloadVerification[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Orders        Order[]

  @@map("users")
}

model ShippingAddress {
  id         String  @id @default(cuid())
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  orders     Order[]
}

model BillingAddress {
  id         String  @id @default(cuid())
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  orders     Order[]
}

model Order {
  id               String   @id @default(cuid())
  email            String
  userId           String
  productId        String
  intent_id        String?  @unique
  pricePaidInCents Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  shippingAddressId String?
  billingAddressId  String?
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  billingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])

  Product Product @relation(fields: [productId], references: [id])
  User    User    @relation(fields: [userId], references: [id])
}


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model DownloadVerification {
  id        String   @id @default(cuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
